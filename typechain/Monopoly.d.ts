/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MonopolyInterface extends Interface {
  functions: {
    players: TypedFunctionDescription<{ encode([]: [string]): string }>;

    validTransition: TypedFunctionDescription<{
      encode([fromPart, toPart, turnNumB, nParticipants]: [
        { outcome: Arrayish; appData: Arrayish },
        { outcome: Arrayish; appData: Arrayish },
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class Monopoly extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Monopoly;
  attach(addressOrName: string): Monopoly;
  deployed(): Promise<Monopoly>;

  on(event: EventFilter | string, listener: Listener): Monopoly;
  once(event: EventFilter | string, listener: Listener): Monopoly;
  addListener(eventName: EventFilter | string, listener: Listener): Monopoly;
  removeAllListeners(eventName: EventFilter | string): Monopoly;
  removeListener(eventName: any, listener: Listener): Monopoly;

  interface: MonopolyInterface;

  functions: {
    players(arg0: string): Promise<string>;

    validTransition(
      fromPart: { outcome: Arrayish; appData: Arrayish },
      toPart: { outcome: Arrayish; appData: Arrayish },
      turnNumB: BigNumberish,
      nParticipants: BigNumberish
    ): Promise<boolean>;
  };

  players(arg0: string): Promise<string>;

  validTransition(
    fromPart: { outcome: Arrayish; appData: Arrayish },
    toPart: { outcome: Arrayish; appData: Arrayish },
    turnNumB: BigNumberish,
    nParticipants: BigNumberish
  ): Promise<boolean>;

  filters: {};

  estimate: {
    players(arg0: string): Promise<BigNumber>;

    validTransition(
      fromPart: { outcome: Arrayish; appData: Arrayish },
      toPart: { outcome: Arrayish; appData: Arrayish },
      turnNumB: BigNumberish,
      nParticipants: BigNumberish
    ): Promise<BigNumber>;
  };
}
