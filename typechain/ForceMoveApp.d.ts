/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ForceMoveAppInterface extends Interface {
  functions: {
    validTransition: TypedFunctionDescription<{
      encode([a, b, turnNumB, nParticipants]: [
        { outcome: Arrayish; appData: Arrayish },
        { outcome: Arrayish; appData: Arrayish },
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class ForceMoveApp extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ForceMoveApp;
  attach(addressOrName: string): ForceMoveApp;
  deployed(): Promise<ForceMoveApp>;

  on(event: EventFilter | string, listener: Listener): ForceMoveApp;
  once(event: EventFilter | string, listener: Listener): ForceMoveApp;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ForceMoveApp;
  removeAllListeners(eventName: EventFilter | string): ForceMoveApp;
  removeListener(eventName: any, listener: Listener): ForceMoveApp;

  interface: ForceMoveAppInterface;

  functions: {
    validTransition(
      a: { outcome: Arrayish; appData: Arrayish },
      b: { outcome: Arrayish; appData: Arrayish },
      turnNumB: BigNumberish,
      nParticipants: BigNumberish
    ): Promise<boolean>;
  };

  validTransition(
    a: { outcome: Arrayish; appData: Arrayish },
    b: { outcome: Arrayish; appData: Arrayish },
    turnNumB: BigNumberish,
    nParticipants: BigNumberish
  ): Promise<boolean>;

  filters: {};

  estimate: {
    validTransition(
      a: { outcome: Arrayish; appData: Arrayish },
      b: { outcome: Arrayish; appData: Arrayish },
      turnNumB: BigNumberish,
      nParticipants: BigNumberish
    ): Promise<BigNumber>;
  };
}
